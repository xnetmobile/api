openapi: 3.0.3
info:
  title: XNET API
  description: |-
    This is a public interface that will allow XNET participants to obtain and manage information about XNET resources. v0.2.0 is unstable Beta and subject to breaking changes. 
    Beta is read only (GET). If you are interested in joining the Beta please reach out to an XNET team member.
  version: 0.2.2
servers:
  - url: https://api.xnetmobile.com
security:
  - BearerAuth: [ ]
tags:
  - name: auth
    description: XNET API Token
  - name: organizations
    description: XNET organizations
  - name: members
    description: XNET members
  - name: users
    description: XNET users
  - name: venues
    description: XNET venues
  - name: devices
    description: XNET devices
  - name: catalogs
    description: XNET catalogs
  - name: wallets
    description: XNET wallets

paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Get user token
      description: Authenticated users can return access token. Please reach out to XNET team for API access.
      security: [ ]  # No security required for login endpoint
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: "********"
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT access token
                  expiresIn:
                    type: integer
                    description: Token lifetime in seconds
                    example: 3600
                  tokenType:
                    type: string
                    example: "Bearer"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
  /devices:
    get:
      tags:
        - devices
      summary: Get list of devices
      description: Get a list of devices that can be filtered by organizations and/or venues
      operationId: getDevices
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
        - name: limit
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
        - name: filter
          in: query
          required: false
          description: A pattern to filter for in organization id and/or venue id, i.e path?filter[orgId]=value&filter[venueId]=value
          schema:
            type: object
            properties:
              orgId:
                type: string
                example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
              venueId:
                type: string
                example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
                description: The uuid of the device's venue
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/DeviceId'
                    - $ref: '#/components/schemas/DeviceDto'
                    - $ref: '#/components/schemas/TagsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - devices
      summary: Create device
      description: Creates a new device
      operationId: createDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceDtoR'
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DeviceId'
                  - $ref: '#/components/schemas/DeviceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /devices/:{id}:
    get:
      tags:
        - devices
      summary: Get device
      description: Get device details by a specific device
      operationId: findDeviceById
      parameters:
        - name: id
          in: path
          required: true
          description: The device uuid
          schema:
            type: string
            example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DeviceId'
                  - $ref: '#/components/schemas/DeviceDto'
                  - $ref: '#/components/schemas/TagsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - devices
      summary: Update device
      description: Change details about a specific device
      operationId: updateDevice
      parameters:
        - name: id
          in: path
          required: true
          description: The device uuid
          schema:
            type: string
            example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceDtoPR'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DeviceId'
                  - $ref: '#/components/schemas/DeviceDto'
                  - $ref: '#/components/schemas/TagsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - devices
      summary: Delete device
      description: Deletes a specific device
      operationId: deleteDevice
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
            description: The device uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /devices/:{id}/state:
    get:
      tags:
        - devices
      summary: Get device state
      description: Get the current state of a specific device
      operationId: findDeviceStateById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
            description: The device uuid
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DeviceStats'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /devices/:{id}/venue:
    post:
      tags:
        - devices
      description: Associate a venue with a specific device
      summary: Add venue to device
      operationId: createVenueDevice
      parameters:
        - name: id
          in: path
          required: true
          description: The device uuid
          schema:
            type: string
            example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceVenue'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DeviceId'
                  - $ref: '#/components/schemas/DeviceDto'
                  - $ref: '#/components/schemas/TagsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - devices
      summary: Remove venue from device
      description: Removes venue association from a specific device
      operationId: deleteVenueDevice
      parameters:
        - name: id
          in: path
          required: true
          description: The venue identifier
          schema:
            type: string
            example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /devices/:{id}/tags:
    post:
      tags:
        - devices
      summary: Add tag to device
      description: Assign a tag to a specific device
      operationId: assignDeviceTagById
      parameters:
        - name: id
          in: path
          required: true
          description: The device uuid
          schema:
            type: string
            example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tags'
      responses:
        '201':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DeviceId'
                  - $ref: '#/components/schemas/DeviceDto'
                  - $ref: '#/components/schemas/TagsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - devices
      summary: Remove tag from device
      description: Remove tags association from a specific device
      operationId: removeDeviceTagById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DeviceId'
                  - $ref: '#/components/schemas/DeviceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /catalog/wifiap:
    get:
      tags:
        - catalogs
      summary: Get list of Wifi AP models
      description: Get a list of Wifi AP models that can be filtered by vendor name, model or product code
      operationId: getWifiApModels
      parameters:
        - name: vendor
          in: query
          description: A pattern to filter for in vendor name
          required: false
          schema:
            type: string
        - name: model
          in: query
          description: A pattern to filter for in vendor model
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
        - name: limit
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogWifiResponse'
              examples:
                success:
                  summary: Example Wifi AP Catalog Response
                  value:
                    wifiAps:
                      - id: "4b522fad-c6f2-49cc-82e5-3a5c75f90772"
                        vendorname: "Alta"
                        vendormodel: "AP6-PRO"
                      - id: "4b7ac7c1-50b5-41d4-bfd7-69dab33ddad8"
                        vendorname: "Cambium"
                        vendormodel: "XE3-8"
                    total: 38
                    page: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /catalog/wifiap/{id}:
    get:
      tags:
        - catalogs
      summary: Get Wifi AP model
      description: Get details about a Wifi AP model
      operationId: getWifiApModel
      parameters:
        - name: id
          in: path
          description: The catalog identifier of Wifi AP model to return
          required: true
          schema:
            type: string
            example: abeaaaf2-d142-11e1-b3e4-080027620c43
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CatalogWifi'
                  - $ref: '#/components/schemas/CatalogWifiDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /venues:
    get:
      tags:
        - venues
      summary: Get list of venues
      description: Get a list of venues that can be filtered by organizations
      operationId: getVenues
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
        - name: limit
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
        - name: filter
          in: query
          required: false
          description: A pattern to filter for in organization id , i.e path?filter[orgId]=value
          schema:
            type: object
            properties:
              orgId:
                type: string
                example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVenue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - venues
      summary: Add venue
      description: Creates a new venue
      operationId: createVenues
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueRequestBody'
      responses:
        '201':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VenueResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /venues/:{id}:
    get:
      tags:
        - venues
      summary: Get venue
      description: Get venue details by a specific venue
      operationId: findVenueById
      parameters:
        - name: id
          in: path
          required: true
          description: The uuid of a venue
          schema:
            type: string
            example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VenueResponseDto'
                  - $ref: '#/components/schemas/TagsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - venues
      summary: Update venue
      description: Change details about a venue
      operationId: updateVenueById
      parameters:
        - name: id
          in: path
          required: true
          description: The uuid of a venue
          schema:
            type: string
            example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/VenueUpdateBody'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VenueResponseDto'
                  - $ref: '#/components/schemas/TagsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - venues
      summary: Delete venue
      description: Delete a specific venue
      operationId: deleteVenueById
      parameters:
        - name: id
          in: path
          required: true
          description: The uuid of a venue
          schema:
            type: string
            example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
      responses:
        '204':
          description: Successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /venues/:{id}/wallet:
    post:
      tags:
        - venues
      summary: Add wallet to venue
      description: Assign a wallet to a specific venue
      operationId: assignVenueWalletById
      parameters:
        - name: id
          in: path
          required: true
          description: The uuid of a venue
          schema:
            type: string
            example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueWallet'
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VenueWalletDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - venues
      summary: Remove wallet from venue
      description: Remove wallet association from a specific venue
      operationId: removeVenueWalletById
      parameters:
        - name: id
          in: path
          required: true
          description: The venue identifier
          schema:
            type: string
            example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
      responses:
        '204':
          description: Successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /venues/:{id}/tags:
    post:
      tags:
        - venues
      summary: Add tag to venue
      description: Assign tag to a specific venue
      operationId: assignVenueTagById
      parameters:
        - name: id
          in: path
          required: true
          description: The venue identifier
          schema:
            type: string
            example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tags'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VenueResponseDto'
                  - $ref: '#/components/schemas/TagsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - venues
      summary: Remove tag from venue
      description: Remove tags from a specific venue
      operationId: removeVenueTagById
      parameters:
        - name: id
          in: path
          required: true
          description: The uuid of a venue
          schema:
            type: string
            example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VenueResponseDto'
                  - $ref: '#/components/schemas/TagsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /venues/:{id}/qualification:
    get:
      tags:
        - venues
      summary: Get venue qualification
      description: Get the qualification status of a venue
      operationId: venueQualified
      parameters:
        - name: id
          in: path
          required: true
          description: The venue identifier
          schema:
            type: string
            example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VenueQualifiedDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /wallets:
    get:
      tags:
        - wallets
      summary: Get list of wallets
      description: Get a list of wallets that can be filtered by organizations and/or venues and/or users
      operationId: findWallets
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: The number of items per page
          schema:
            type: integer
        - name: filter
          description: A pattern to filter for in organization, venue, or user identifier
          in: query
          required: false
          schema:
            type: object
            properties:
              orgId:
                type: string
                example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
                description: The uuid of an organization
              wallet:
                type: string
                example: HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH
                description: The uuid of a venue
              venueId:
                type: string
                example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
                description: The uuid of a user
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - wallets
      summary: Add wallet
      description: Creates a new wallet
      operationId: createWallets
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/WalletId'
                - $ref: '#/components/schemas/WalletDtoR'
      responses:
        '201':
          description: Created successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /wallets/:{id}:
    get:
      tags:
        - wallets
      summary: Get wallet
      description: Get details from a specific wallet
      operationId: findWalletsById
      parameters:
        - name: id
          in: path
          required: true
          description: The wallet uuid
          schema:
            example: bd121977-6eef-46f4-ac5e-6342c86edef6
            type: string
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - wallets
      summary: Update wallet
      description: Change details about a specific wallet
      operationId: updateWalletById
      parameters:
        - name: id
          description: The wallet uuid
          in: path
          required: true
          schema:
            example: bd121977-6eef-46f4-ac5e-6342c86edef6
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WalletId'
                  - $ref: '#/components/schemas/WalletDto'
                  - $ref: '#/components/schemas/Wallet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - wallets
      summary: Delete wallet
      description: Delete a specific wallet
      operationId: deleteWalletById
      parameters:
        - name: id
          description: The wallet uuid
          in: path
          required: true
          schema:
            type: string
            example: bd121977-6eef-46f4-ac5e-6342c86edef6
      responses:
        '204':
          description: Successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations:
    get:
      tags:
        - organizations
      summary: Get list of organizations
      description: Get a list of organizations
      operationId: findOrganizations
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
        - name: limit
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
        - name: filter
          in: query
          required: false
          description: A pattern to filter for in organization identifier, i.e /organizations?filter[orgId]=value
          schema:
            type: object
            properties:
              orgId:
                type: string
                example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
              status:
                type: string
                example: active
              type:
                type: string
                example: community

      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Organization'
                    - $ref: '#/components/schemas/OrganizationUser'
              examples:
                no_filter_response:
                  summary: Response when no filters are applied
                  value: [
                    {
                      "id": "bb8ddad9-5eb8-44f5-a541-3a3134a1c82d",
                      "status": "active",
                      "name": "XNET Main",
                      "phone": "123-456-7890",
                      "type": "community",
                      "createdat": "2025-01-03T14:54:29.204Z",
                      "updatedat": "2025-01-03T14:54:29.204Z",
                      "users": [ "user@xnet.company" ]
                    }
                  ]
                filtered_response:
                  summary: Response when filters are applied
                  value: [
                    {
                      "id": "bb8ddad9-5eb8-44f5-a541-3a3134a1c82d",
                      "status": "active",
                      "name": "XNET Branch",
                      "phone": "123-456-7891",
                      "type": "community",
                      "createdat": "2025-01-03T14:54:29.204Z",
                      "updatedat": "2025-01-03T14:54:29.204Z",
                      "users": [ "user@xnet.company" ]
                    }
                  ]

        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - organizations
      summary: Create organization
      description: Creates a new organization
      operationId: createOrganizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDto'
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations/:{id}:
    get:
      tags:
        - organizations
      summary: Get organization
      description: Get details of a specific organization
      operationId: findOrganizationsById
      parameters:
        - name: id
          in: path
          required: true
          description: The uuid of an organization
          schema:
            type: string
            example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Organization'
                  - $ref: '#/components/schemas/OrganizationUser'
              examples:
                single_organization_response:
                  summary: Response for a single organization
                  value:
                    id: "bb8ddad9-5eb8-44f5-a541-3a3134a1c82d"
                    status: "active"
                    name: "XNET Main"
                    phone: "123-456-7890"
                    type: "community"
                    createdat: "2025-01-03T14:54:29.204Z"
                    updatedat: "2025-01-03T14:54:29.204Z"
                    users: [ "user@xnet.company" ]
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - organizations
      summary: Update organization
      description: Update details of a specific organization
      operationId: updateOrganizationsById
      parameters:
        - name: id
          in: path
          required: true
          description: The uuid of an organization
          schema:
            type: string
            example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDtoO'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - organizations
      summary: Delete organization
      description: Delete a specific organization
      operationId: deleteOrganizationsById
      parameters:
        - name: id
          in: path
          required: true
          description: The organization identifier
          schema:
            type: string
            example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /members:
    get:
      tags:
        - members
      summary: Get list of members
      description: Get a list of members
      operationId: findAllOrgMembers
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
        - name: limit
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
        - name: filter
          in: query
          required: false
          description: A pattern to filter for in organization and/or user, i.e path?filter[orgId]=value&filter[userId]=value
          schema:
            type: object
            properties:
              orgId:
                type: string
                example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
              userId:
                type: string
                example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MembersRes'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - members
      summary: Create member
      description: Creates a new member of a specific organization
      operationId: findOrgMember
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembersDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersInactive'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - members
      summary: Update member
      description: Change details of a specific member of an organization
      operationId: updateOrgMember
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembersDto'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /members/org/:{orgId}/user/:{email}:
    delete:
      tags:
        - members
      summary: Delete member
      description: Deletes an user member of a specific organization
      operationId: deleteOrgMemberById
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
        - name: email
          in: path
          required: true
          schema:
            type: string
            example: xnetuser@xnet.com
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users:
    get:
      tags:
        - users
      summary: Get list of users
      description: Get a list of user that can be filtered by email and organization
      operationId: findUsers
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
        - name: limit
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
        - name: filter
          in: query
          required: false
          description: A pattern to filter for in users and/or user, i.e /users?filter[orgId]=value&filter[email]=value
          schema:
            type: object
            properties:
              orgId:
                type: string
                example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
              email:
                type: string
                example: user@xnet.company
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - users
      summary: Create user
      description: Creates a new user. After user is created an email will be sent to the user with a link to set their password.
      operationId: createUsers
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: Created successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UserPost'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/:{id}:
    get:
      tags:
        - users
      summary: Get user
      description: Get details of a specific user
      operationId: findUsersById
      parameters:
        - name: id
          in: path
          required: true
          description: The user identifier
          schema:
            type: string
            example: 8186a947-8670-4cc9-be1a-79efd18defea
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - users
      summary: Update user
      description: Update details of a specific user
      operationId: updateUsersById
      parameters:
        - name: id
          in: path
          required: true
          description: The user identifier
          schema:
            type: string
            example: 8186a947-8670-4cc9-be1a-79efd18defea
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDtoO'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - users
      summary: Delete user
      description: Delete a specific user
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          description: The user identifier
          schema:
            type: string
            example: 8186a947-8670-4cc9-be1a-79efd18defea
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties: {
                  message: {
                    type: string,
                    example: User with userid '9d6950f8-24ae-48b1-accf-bc6399351d5c' has been successfully deleted.
                  }
                }
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        All API requests must include a valid bearer token obtained from the /auth/login endpoint.
        Tokens are bound to specific user accounts and permissions.
  schemas:
    DeviceId:
      type: object
      properties:
        id:
          type: string
          example: e4eaaaf2-d142-11e1-b3e4-080027620cdd
          description: The device uuid
    DeviceDtoPR:
      type: object
      properties:
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of the device's venue
        venueId:
          type: string
          example: 5tb083a7-a310-4a9a-8a26-cd78cdd35e39
          description: The uuid of the device's venue
        macAddress:
          type: string
          format: int64
          example: be:b1:21:02:fa:18
          description: The macaddress of a device
        vendorsn:
          type: string
          example: AP123456789
          description: The serial number of a device
        catalogId:
          type: string
          example: 5tb083a7-a310-4a9a-8a26-cd78cdd35e39
          description: The catalog uuid associated with the device          
    DeviceDtoR:
      type: object
      required:
        - orgId
        - macAddress
        - vendorsn
        - catalogId
      properties:
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of the device's venue
        venueId:
          type: string
          example: 5tb083a7-a310-4a9a-8a26-cd78cdd35e39
          description: The uuid of the device's venue
        macAddress:
          type: string
          format: int64
          example: be:b1:21:02:fa:18
          description: The macaddress of a device
        vendorsn:
          type: string
          example: AP123456789
          description: The serial number of a device
        catalogId:
          type: string
          example: 5tb083a7-a310-4a9a-8a26-cd78cdd35e39
          description: The catalog uuid associated with the device
    DeviceDto:
      type: object
      properties:
        status:
          type: string
          example: active
          description: The status of the device
        venueId:
          type: string
          example: 5tb083a7-a310-4a9a-8a26-cd78cdd35e39
          description: The uuid of the device's venue
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of the device's venue
        macAddress:
          type: string
          format: int64
          example: be:b1:21:02:fa:18
          description: The macaddress of a device
        vendorsn:
          type: string
          example: AP123456789
          description: The serial number of a device
        catalogId:
          type: string
          example: 5tb083a7-a310-4a9a-8a26-cd78cdd35e39
          description: The catalog uuid associated with the device
    DeviceStats:
      type: object
      properties:
        alive:
          type: integer
          example: 0
          description: The current state of a device. If its connected (1) or disconnected (0)
        statusCheckTime:
          type: string
          example: "2024-01-01 00:00:00"
          description: The time when the device information was obtained
        channel:
          type: string
          example: 20 MHz
          description: The channel configured on the device
        bandWidth:
          type: string
          example: 37.774929
          description: The bandwidth configured on the device
    VenueRequestBody:
      type: object
      required:
        - orgId
        - name
        - fullAddress
        - venueDesc
        - venuePhone
        - isp
      properties:
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of the organization to which the venue belongs
        walletId:
          type: string
          example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
          description: The uuid of the wallet to which the venue belongs
        name:
          type: string
          example: XNET Campus
          description: The name of a venue
        fullAddress:
          type: string
          example: 1111 S Figueroa St, Los Angeles, CA 90015, USA
          description: The full address of a venue
        venueDesc:
          type: string
          example: PROFESSIONAL OFFICE
          description: The type of a venue
        venuePhone:
          type: string
          example: 547-546-4567
          description: The phone of a venue
        building:
          type: string
          example: The Pinnacle
          description: Building or structure name.
        floor:
          type: string
          example: 55
          description: Floor number of the building.
        room:
          type: string
          example: 12
          description: Room identifier.
        isp:
          $ref: '#/components/schemas/IspDtoR'
    VenueUpdateBody:
      type: object
      properties:
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of the organization to which the venue belongs
        name:
          type: string
          example: XNET Campus
          description: The name of a venue
        venueDesc:
          type: string
          example: PROFESSIONAL OFFICE
          description: The description of a venue
        venuePhone:
          type: string
          example: 547-546-4567
          description: The phone of a venue
        building:
          type: string
          example: The Pinnacle
          description: Building or structure name.
        floor:
          type: string
          example: 55
          description: Floor number of the building.
        room:
          type: string
          example: 12
          description: Room identifier.
        isp:
          $ref: '#/components/schemas/IspDto'
    VenueResponseDto:
      type: object
      properties:
        id:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of a venue
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of the organization to which the venue belongs
        walletId:
          type: string
          example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
          description: The uuid of the wallet to which the venue belongs
        name:
          type: string
          example: XNET Campus
          description: The name of a venue
        status:
          type: string
          example: inactive
          description: The current status of a venue
        fulladdress:
          type: string
          example: 1111 S Figueroa St, Los Angeles, CA 90015, USA
          description: The full address of a venue
        venueDesc:
          type: string
          example: PROFESSIONAL OFFICE
          description: The type of a venue
        venuePhone:
          type: string
          example: 547-546-4567
          description: The phone of a venue
        latitude:
          type: string
          example: 34.043087
          description: The geographic coordinate that specifies the north-south position of a venue
        longitude:
          type: string
          example: 34.043087
          description: The geographic coordinate that specifies the west-east position of a venue
        building:
          type: string
          example: The Pinnacle
          description: Building or structure name.
        floor:
          type: string
          example: 55
          description: Floor number of the building.
        room:
          type: string
          example: 12
          description: Room identifier.
        isp:
          $ref: '#/components/schemas/IspDto'
    VenueWallet:
      properties:
        wallet:
          properties:
            address:
              type: string
              example: HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH
              description: The wallet address associated with the venue
    VenueWalletDto:
      properties:
        wallet:
          properties:
            venueId:
              type: string
              example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
              description: The uuid of a venue
            walletId:
              type: string
              example: bd121977-6eef-46f4-ac5e-6342c86edef6
              description: The wallet id associated with the venue
    IspDtoR:
      type: object
      required:
        - name
        - class
        - connection
        - bandwidth
        - ispSecurity
      properties:
        name:
          type: string
          example: Comcast
          description: The name of a isp
        class:
          type: string
          example: business
          description: The class of a isp
        connection:
          type: string
          example: Fiber
          description: The connection of a isp
        bandwidth:
          type: integer
          example: 500-999
          description: The bandwidth of a isp
        ispSecurity:
          type: array
          items:
            type: string
          description: The physical and network security in place around the access point.
          example:
            - VPN Gateway
            - Network Segmentation (L3) (VLANS)
    IspDto:
      type: object
      properties:
        name:
          type: string
          example: Comcast
          description: The name of a isp
        class:
          type: string
          example: business
          description: The class of a isp
        connection:
          type: string
          example: Fiber
          description: The connection of a isp
        bandwidth:
          type: integer
          example: 500-999
          description: The bandwidth of a isp
        ispSecurity:
          type: array
          items:
            type: string
          description: The physical and network security in place around the access point.
          example:
            - VPN Gateway
            - Network Segmentation (L3) (VLANS)
    Wallet:
      type: object
      properties:
        id:
          type: string
          example: bd121977-6eef-46f4-ac5e-6342c86edef6
          description: Unique identifier for the wallet
        wallet:
          type: string
          example: HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH
          description: Wallet address or identifier
        orgId:
          type: string
          example: 48739432-c72a-409f-b56c-88782c41c626
          description: Organization identifier associated with the wallet
        name:
          type: string
          nullable: true
          example: XNWallet
          description: Optional name field (can be null)
        createdat:
          type: string
          format: date-time
          example: "2025-03-13T23:38:34.193Z"
          description: Timestamp when the wallet was created
        updatedat:
          type: string
          format: date-time
          example: "2025-03-13T23:38:34.193Z"
          description: Timestamp when the wallet was last updated
    WalletId:
      type: object
      properties:
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The address of a wallet
    WalletDto:
      type: object
      properties:
        name:
          type: string
          example: wallet name
          description: The name of a wallet
    WalletDtoR:
      type: object
      required:
        - id
        - name
      properties:
        wallet:
          type: string
          example: HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH
          description: The address of a wallet
        name:
          type: string
          example: wallet name
          description: The name of a wallet
    OrganizationUser:
      type: object
      properties:
        users:
          type: array
          items:
            type: string
            example: "8186a947-8670-4cc9-be1a-79efd18defea"
            description: The members of an organization
          example:
            - "8186a947-8670-4cc9-be1a-79efd18defea"
            - "0cd6b14d-024c-4bbe-821c-1cff032fcf88"
          description: The members of an organization
    CreateOrganization:
      type: object
      properties:
        organization:
          type: object
          properties:
            id:
              type: string
              example: b17c00cd-0b17-421c-9c13-a440d1c7d6f8
              description: The UUID of the organization
            status:
              type: string
              example: Active
              description: The status of the organization
            name:
              type: string
              example: EvilCorppp
              description: The name of the organization
            phone:
              type: string
              example: 666-666-6666
              description: The phone number of the organization
            type:
              type: string
              example: community
              description: The type of the organization
            createdat:
              type: string
              format: date-time
              example: 2025-03-11T22:12:17.829Z
              description: The date and time the organization was created
            updatedat:
              type: string
              format: date-time
              example: 2025-03-11T22:12:17.829Z
              description: The date and time the organization was updated
        membership:
          type: object
          properties:
            orgId:
              type: string
              example: b17c00cd-0b17-421c-9c13-a440d1c7d6f8
              description: The UUID of the organization
            userId:
              type: string
              example: 3f88ab54-7c98-4218-a067-72d8770b4bc5
              description: The UUID of the user
            orgRole:
              type: string
              example: org-owner
              description: The Keycloak role assigned to the user
            status:
              type: string
              example: pending
              description: The status of the membership
            createdat:
              type: string
              format: date-time
              example: 2025-03-11T22:12:18.181Z
              description: The date and time the membership was created
            updatedat:
              type: string
              format: date-time
              example: 2025-03-11T22:12:18.181Z
              description: The date and time the membership was updated
    Organization:
      type: object
      properties:
        id:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of an organization
        status:
          type: string
          example: active
          description: The status of an organization
        name:
          type: string
          example: XNET
          description: The name of an organization
        phone:
          type: string
          example: 123-456-7890
          description: The phone of an organization
        type:
          type: string
          example: community
          description: The type of an organization
        createdat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time an organization was created
        updatedat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time an organization was updated
    OrganizationDto:
      type: object
      required:
        - name
        - phone
      properties:
        name:
          type: string
          example: XNET
          description: The name of an organization
        phone:
          type: string
          example: 123-456-7890
          description: The phone of an organization
    OrganizationDtoO:
      type: object
      properties:
        name:
          type: string
          example: XNET
          description: The name of an organization
        phone:
          type: string
          example: 123-456-7890
          description: The phone of an organization
    MembersRes:
      type: object
      properties:
        orgId:
          type: string
          example: "4f01bee2-d3aa-4cf2-8d59-a64de1125876"
          description: "The UUID of an organization"
        userId:
          type: string
          example: "2b07323f-3911-442c-851a-bcc9bd7503c0"
          description: "The UUID of a user"
        orgRole:
          type: string
          example: "org-owner"
          description: "The role of the member within the organization"
        status:
          type: string
          example: "Active"
          description: "The status of the member"
        createdat:
          type: string
          format: date-time
          example: "2025-03-06T14:58:30.494Z"
          description: "The date and time the member was created"
        updatedat:
          type: string
          format: date-time
          example: "2025-03-06T14:58:30.494Z"
          description: "The date and time the member was updated"
        organization:
          type: object
          properties:
            id:
              type: string
              example: "4f01bee2-d3aa-4cf2-8d59-a64de1125876"
              description: "Organization UUID"
            status:
              type: string
              example: "active"
              description: "The status of the organization"
            name:
              type: string
              example: "nick@carpinito.id"
              description: "The name or email identifier of the organization"
            phone:
              type: string
              nullable: true
              example: 123-456-7890
              description: "Phone number associated with the organization"
            type:
              type: string
              example: "community"
              description: "The type of organization"
            createdat:
              type: string
              format: date-time
              example: "2025-03-06T14:59:17.087Z"
              description: "Timestamp when the organization was created"
            updatedat:
              type: string
              format: date-time
              example: "2025-03-12T13:13:13.370Z"
              description: "Timestamp when the organization was updated"
        user:
          type: object
          properties:
            id:
              type: string
              example: "2b07323f-3911-442c-851a-bcc9bd7503c0"
              description: "User UUID"
            status:
              type: string
              example: "active"
              description: "The status of the user"
            email:
              type: string
              example: "nick@carpinito.id"
              description: "User email address"
            name:
              type: string
              example: "nick@carpinito.id"
              description: "User's name"
            phone:
              type: string
              example: "123-876-7890"
              description: "User phone number"
            discord:
              type: string
              example: "meta.light"
              description: "User's Discord handle"
            telegram:
              type: string
              example: "@xnetsoldier"
              description: "User's Telegram handle"
            socials:
              type: array
              items:
                type: string
                example: "https://www.linkedin.com/company/xnetmobile"
              description: "List of social media identifiers"
            signonwallet:
              type: string
              nullable: true
              example: HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH
              description: "User's sign-on wallet address"
            createdat:
              type: string
              format: date-time
              example: "2024-05-03T19:12:11.231Z"
              description: "Timestamp when the user was created"
            updatedat:
              type: string
              format: date-time
              example: "2024-05-03T19:12:11.231Z"
              description: "Timestamp when the user was updated"
    Members:
      type: object
      properties:
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of an organization
        email:
          type: string
          example: xnetuser@xnet.com
          description: The email of a user
        orgRole:
          type: string
          example: org-admin
          description: This field defines the role of a member within the organization
        status:
          type: string
          example: active
          description: The status of a member
        createdat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time a member was created
        updatedat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time a member was updated
    MembersInactive:
      type: object
      properties:
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of an organization
        email:
          type: string
          example: xnetuser@xnet.com
          description: The email of a user
        orgRole:
          type: string
          example: org-admin
          description: This field defines the role of a member within the organization
        status:
          type: string
          example: inactive
          description: The status of a member
        createdat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time a member was created
        updatedat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time a member was updated
    MembersDto:
      type: object
      required:
        - orgId
        - email
        - orgRole
      properties:
        orgId:
          type: string
          example: bb8ddad9-5eb8-44f5-a541-3a3134a1c82d
          description: The uuid of an organization
        email:
          type: string
          example: xnetuser@xnet.com
          description: The email of a user
        orgRole:
          type: string
          example: org-admin
          description: This field defines the role of a member within the organization.
    User:
      type: object
      properties:
        id:
          type: string
          example: 8186a947-8670-4cc9-be1a-79efd18defea
          description: The uuid of a user
        signOnWallet:
          type: string
          example: HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH
          description: The user wallet address
        status:
          type: string
          example: active
          description: The status of an user
        name:
          type: string
          example: XNET user
          description: The name of an user
        phone:
          type: string
          example: 123-456-7654
          description: The phone of an user
        email:
          type: string
          example: xnetuser@xnet.com
          description: The email of an user
        discord:
          type: string
          example: xnetsoldier
          description: The discord handle of a user
        telegram:
          type: string
          example: "@xnetsoldier"
          description: The telegram handle of a user
        socials:
          type: string
          example: www.linkedin.com/company/xnetmobile
          description: The social media link of a user
        createdat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time an user was created
        updatedat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time an user was updated
    UserPost:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: "8186a947-8670-4cc9-be1a-79efd18defea"
            signonwallet:
              type: string
              nullable: true
              example: "HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH"
            status:
              type: string
              example: "inactive"
            name:
              type: string
              example: "XNET user"
            phone:
              type: string
              example: "123-456-7654"
            email:
              type: string
              format: email
              example: "xnetuser@xnet.com"
            discord:
              type: string
              nullable: true
              example: "xnetsoldier"
            telegram:
              type: string
              nullable: true
              example: "@xnetsoldier"
            socials:
              type: array
              items:
                type: string
              example: [ www.linkedin.com/company/xnetmobile ]
            createdat:
              type: string
              format: date-time
              example: "2025-03-25T23:33:48.780Z"
            updatedat:
              type: string
              format: date-time
              example: "2025-03-25T23:33:48.780Z"
        organization:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: "bb8ddad9-5eb8-44f5-a541-3a3134a1c82d"
            status:
              type: string
              example: "active"
            name:
              type: string
              example: "XNET Main"
            phone:
              type: string
              nullable: true
              example: "123-456-7890"
            type:
              type: string
              example: "community"
            createdat:
              type: string
              format: date-time
              example: "2025-03-25T23:33:48.782Z"
            updatedat:
              type: string
              format: date-time
              example: "2025-03-25T23:33:48.782Z"
        membership:
          type: object
          properties:
            orgId:
              type: string
              format: uuid
              example: "bb8ddad9-5eb8-44f5-a541-3a3134a1c82d"
            userId:
              type: string
              format: uuid
              example: "8186a947-8670-4cc9-be1a-79efd18defea"
            orgRole:
              type: string
              example: "org-owner"
            status:
              type: string
              example: "active"
            createdat:
              type: string
              format: date-time
              example: "2025-03-25T23:33:48.784Z"
            updatedat:
              type: string
              format: date-time
              example: "2025-03-25T23:33:48.784Z"
      required:
        - user
        - organization
        - membership
    UserDto:
      type: object
      required:
        - name
        - phone
        - email
      properties:
        name:
          type: string
          example: XNET user
          description: The name of an user
        phone:
          type: string
          example: 123-456-7654
          description: The phone of an user
        signOnWallet:
          type: string
          example: HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH
          description: The user wallet address
        email:
          type: string
          example: xnetuser@xnet.com
          description: The email of an user
        discord:
          type: string
          example: xnetsoldier
          description: The discord identifier of an user
        telegram:
          type: string
          example: "@xnetsoldier"
          description: The telegram handle of a user
        socials:
          type: string
          example: www.linkedin.com/company/xnetmobile
          description: The social media link of a user
    UserDtoO:
      type: object
      properties:
        signOnWallet:
          type: string
          example: HN7cABqLq46Es1jh92dQQisAq662SmxELLLsHHe4YWrH
          description: The user wallet address
        name:
          type: string
          example: XNET user
          description: The first and last name of the user
        phone:
          type: string
          example: 123-456-7654
          description: The phone of an user
        discord:
          type: string
          example: xnetsoldier
          description: The discord identifier of an user
        telegram:
          type: string
          example: "@xnetsoldier"
          description: The telegram handle of a user
        socials:
          type: string
          example: www.linkedin.com/company/xnetmobile
          description: The social media link of a user
    CatalogWifiResponse:
      type: object
      properties:
        wifiAps:
          type: array
          items:
            $ref: '#/components/schemas/CatalogWifi'
        total:
          type: integer
          example: 38
        page:
          type: integer
          example: 1
    
    CatalogWifi:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 4b522fad-c6f2-49cc-82e5-3a5c75f90772
        vendorname:
          type: string
          example: Alta
        vendormodel:
          type: string
          example: AP6-PRO
    CatalogWifiDto:
      type: object
      properties:
        vendorname:
          type: string
          description: "The name of the vendor or manufacturer."
          example: "Ruckus"
        vendormodel:
          type: string
          description: "The model name or designation from the vendor."
          example: "XR6"
    ListVenue:
      type: object
      properties:
        venues:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/VenueResponseDto'
              - properties:
                  tags:
                    type: array
                    description: This is a personalized label for this venue
                    items:
                      type: string
                      example: [ A,B ]
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
    DeviceVenue:
      type: object
      properties:
        venueId:
          type: string
          example: 9fb083a7-a310-4a9a-8a26-cd78cdd35e04
          description: The uuid of the device's venue
    Tags:
      type: array
      description: The name of a tag
      items:
        type: string
      example: [ A,B ]
    TagsDto:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          example: [ A,B ]
          description: This is a personalized label for this resource
    VenueQualifiedDto:
      type: object
      properties:
        qualified:
          type: string
          example: QUALIFIED
          description: The qualification status of the venue
        createdat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time a qualification venue was created
        updatedat:
          type: string
          example: 2025-01-03T14:54:29.204Z
          description: The date and time a qualification venue was updated
    ErrorDto:
      type: object
      properties:
        title:
          type: string
          description: A short, human-readable summary of the response type.
        status:
          type: string
          description: The HTTP status code generated by the API server for this occurrence of the problem.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
  responses:
    Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDto'
    NoContent:
      description: No content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDto'
    BadRequest:
      description: Incorrect data provided
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDto'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDto'
    Unauthorized:
      description: Unauthorized. See specific error message.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDto'
    Conflict:
      description: Request cannot be fulfilled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDto'
    InternalServerError:
      description: Server error processing the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDto'
    ServiceUnavailable:
      description: Service is temporarily unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDto'